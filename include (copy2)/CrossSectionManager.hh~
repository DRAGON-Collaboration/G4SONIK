#ifndef CrossSectionManager_h
#define CrossSectionManager_h 1

#include <TH1F.h>
#include <TH2F.h>
#include <TFile.h>
#include <TFolder.h>
#include <TTree.h>
#include <stdio.h>
#include <Riostream.h>
#include <TFile.h>
#include <TTree.h>
#include <TMath.h>
#include <TRandom3.h>
#include <TF1.h>
#include <TH1.h>
#include <TH2.h>
#include <TGraph2D.h>
#include <TSystem.h>
#include <TSpline.h>
#include <TMultiGraph.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TF2.h>
#include "KinManager.hh"
#include "InputManager.hh"

#include <vector>
#include <string>
#include <map>
#include <iostream>
#include <fstream>
#include <sstream>
#include <memory>
#include <stdexcept>
#include <vector>

class CrossSectionManager {

  public:

  CrossSectionManager(InputManager* aInMgr);
 ~CrossSectionManager();

  void GenerateCrossSection();
  bool GenerateEvent();

  bool GetEvent();
  double GetN_scat();
  double GetX();
  double GetY();
  double GetZ();
  double GetTheta();
  double GetPhi();
  double GetE();
  double GetEcm();
  double GetIonA();
  double GetIonZ();

///////////////////////////////////////////////////////////////////////////////
  double GetEbeam();
  double GetThetaBeam();
  double GetPhiBeam();
///////////////////////////////////////////////////////////////////////////////

  double GetTargetLength();
  double GetTargetOffset();

  double res(Double_t ecm, Double_t thetacm);
  double res_exp(Double_t ecm, Double_t thetacm);
  double ruth(Double_t z_a, Double_t z_b, Double_t ecm, Double_t thetacm);

  private:

  double theta, phi/*rad*/, E_scat/*MeV*/, n_scat/*total number of scattering events*/, E_scatcm;
  double theta_beam, phi_beam/*rad*/, E_beam/*MeV*/, n_beam/*total number of scattering events*/, E_beamcm; /////////////////////////////
  double zmin, zmax;//beam axis limits (cm)
  double phi_min, phi_max;//azmuthal angular limits
  double TargetLength, TargetOffset; //length of target & offset from orign in cm
  double pos[3]; // position of scattering event {x,y,z} in cm
  double a[3]; // mass numbers: {beam,target,recoil}
  double z[3]; // charges in Z
  Double_t z_max, z_min; // beam axis limits in cm
  int ebin_min;
  int EventCount;//tracks number of events
  int pdone, pdone_prev;//percentage of scattering events completed
  bool Event;//is there event from GenerateCrossSection()
  // Kinematic variables.
  string cxFile;
  enum {BEAM=0, TARGET=1, RECOIL=2};

  TFile* CSfile;
  TH2F hE;//beam energy profile through target
  TH2F hE_lim;
  TH2F hEtheta;//contains cs data for all energy and theta bins
  TH1F hEscat;//scattering pdf for given energy
  TH1F hEscat_lim;
  
  KinManager* KinMgr;
  InputManager* InMgr;

};

#endif

#include "TrackerSD.hh"

TrackerSD::TrackerSD(G4String name, TreeManager* aTMgr, InputManager* aInMgr):G4VSensitiveDetector(name) {

  TMgr = aTMgr;
  InMgr = aInMgr;
  G4String HCname;
  collectionName.insert(HCname="trackerCollection");
  n_hit=0;
  
}

TrackerSD::~TrackerSD(){ }

void TrackerSD::Initialize(G4HCofThisEvent* HCE) {

  trackerCollection = new TrackerHitsCollection(SensitiveDetectorName,collectionName[0]); 
  static G4int HCID = -1;

  if(HCID<0) {
    HCID = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]);
  }

  HCE->AddHitsCollection( HCID, trackerCollection ); 

}

G4bool TrackerSD::ProcessHits(G4Step* aStep,G4TouchableHistory*) {

  G4double edep = aStep->GetTotalEnergyDeposit();

  if(edep<0) return false;

  TrackerHit* newHit = new TrackerHit();
  newHit->SetTrackID  (aStep->GetTrack()->GetTrackID());
  newHit->SetChamberNb(aStep->GetPreStepPoint()->GetTouchableHandle()->GetCopyNumber());
  newHit->SetEdep     (edep);
  newHit->SetPos      (aStep->GetPostStepPoint()->GetPosition());
  trackerCollection->insert(newHit);
  
  copynum = aStep->GetPostStepPoint()->GetTouchableHandle()->GetCopyNumber(0);

  TMgr->SetHit(true);
  TMgr->SetE_det(edep);
  TMgr->SetDet_no(double(copynum));

  n_hit += 1;//number of detector hits
  if (n_hit>1) cout << '\r';
  cout << "number of detected events: " << n_hit << "      ";

  return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void TrackerSD::EndOfEvent(G4HCofThisEvent*) {

  if (verboseLevel>0) {
    G4int NbHits = trackerCollection->entries();
    G4cout << "\n-------->Hits Collection: in this event they are " << NbHits 
            << " hits in the tracker chambers: " << G4endl;
    for (G4int i=0;i<NbHits;i++) (*trackerCollection)[i]->Print();
  } 

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


double TrackerSD::GetCopynum() {
  
  return copynum;
  
}
